call plug#begin("~/vimfiles/plugged")

" tokyo-metro
Plug 'koirand/tokyo-metro.vim', {'do': 'cp colors/* ~/vimfiles/colors/'}

" Emmet
Plug 'mattn/emmet-vim'

" lightline
Plug 'itchyny/lightline.vim'

" indentLine
Plug 'Yggdroot/indentLine'

" fugitive
Plug 'tpope/vim-fugitive'

" fzf
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Vaffle 
Plug 'cocopon/vaffle.vim'

" Syntastic
Plug 'vim-syntastic/syntastic'

" Go
Plug 'fatih/vim-go'
Plug 'vim-jp/vim-go-extra'

" CoffeeScript
Plug 'kchmck/vim-coffee-script'

" CSS
Plug 'hail2u/vim-css3-syntax'

" Powershell
Plug 'PProvost/vim-ps1'

" easymotion
Plug 'easymotion/vim-easymotion'

" toml 
Plug 'cespare/vim-toml'

call plug#end()

"----------------------------------------------
" defines
"----------------------------------------------
" tokyo-metro
syntax on
set t_Co=256
colorscheme tokyo-metro

" lightline
let g:lightline = {
	\ 'mode_map': {'c': 'NORMAL'},
	\ 'active': {
	\   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
	\ }
	\ }

" fzf
nmap <C-p> :Files<CR>
imap <C-x><C-l> <plug>(fzf-complete-line)
let g:fzf_action = {
	\ 'ctrl-t': 'tab split',
	\ 'ctrl-i': 'split',
	\ 'ctrl-s': 'vsplit' }
let g:fzf_layout = { 'down': '~20%' }
let g:rg_command = '
	\ rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --color "always"
	\ -g "*.{js,json,php,md,styl,pug,jade,html,config,py,cpp,c,go,hs,rb,conf,fa,lst}"
	\ -g "!{.config,.git,node_modules,vendor,build,yarn.lock,*.sty,*.bst,*.coffee,dist}/*" '

command! -bang -nargs=* F call fzf#vim#grep(g:rg_command .shellescape(<q-args>), 1, <bang>0)

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" vim-go
let g:go_fmt_command = 'goimports'
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:syntastic_go_checkers = ['go', 'errcheck', 'golint']
au BufNewFile,BufRead *.go set completeopt=menu
" filetype plugin indent on

" easymotion
let g:EasyMotion_do_mapping = 0 " Disable default mappings
nmap <S-s> <Plug>(easymotion-overwin-f)
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
